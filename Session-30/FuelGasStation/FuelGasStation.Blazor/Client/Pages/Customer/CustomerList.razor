@page "/customerlist"
@using FuelGasStation.Blazor.Shared.Customer;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Customers</PageTitle>
<h3>Customer List</h3>

<style>
    body {
        background-color: whitesmoke
    }

    .main-btn {
        margin-top: 15px;
        margin-bottom: 15px;
    }

    h3 {
        border-bottom: thin;
    }
</style>
@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
    <p style="color:blue">Loading...</p>
}
else
{

    <button class="btn btn-primary" @onclick="CreateItem">Create +</button>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Card Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerList)
            {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.CardNumber</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(customer)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(customer)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CustomerListDto> customerList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        customerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("customerlist/edit");
    }

    private void EditItem(CustomerListDto customer)
    {
        navigationManager.NavigateTo($"todolist/edit/{customer.Id}");
    }

    private async Task DeleteItem(CustomerListDto customer)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"customer/{customer.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}

